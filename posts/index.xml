<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Bruno Hensel</title><link>https://www.brunohensel.dev/posts/</link><description>Recent content in Posts on Bruno Hensel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Jul 2024 08:07:15 +0200</lastBuildDate><atom:link href="https://www.brunohensel.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Don't let Layout duplication break your App</title><link>https://www.brunohensel.dev/posts/do-not-let-layout-dupe-break-your-app/</link><pubDate>Sat, 13 Jul 2024 08:07:15 +0200</pubDate><guid>https://www.brunohensel.dev/posts/do-not-let-layout-dupe-break-your-app/</guid><description>How View Binding can help Link to heading View binding is a great feature that simplifies interacting with views in your Android app. It generates binding classes that directly reference views with IDs in your layouts. In simpler terms, it replaces the need for findViewById to create a reference to a view by ID.
The usage is simple, you create a layout example_layout.xml, and a corresponding binding class, ExampleLayoutBinding, will be automatically generated, with which you can access your layout nodes using syntax like yourBinding.</description></item><item><title>Creating Anvil-like annotation for Hilt using KSP</title><link>https://www.brunohensel.dev/posts/creating-anvil-like-annotation-for-hilt/</link><pubDate>Sat, 03 Feb 2024 16:57:15 +0200</pubDate><guid>https://www.brunohensel.dev/posts/creating-anvil-like-annotation-for-hilt/</guid><description>This post assumes some familiarity with dependency injection using Dagger Hilt on Android.
This blog post will address code generation to ease the process using @Binds annotation to create aliases to a particular type.
Provide a type to the graph Link to heading When you are creating classes, usually only annotating them with @Inject will be enough to tell Dagger which constructor and fields should be used to create instances of classes.</description></item><item><title>Partially-applied function. A `practical` example.</title><link>https://www.brunohensel.dev/posts/partially-applied-function-example/</link><pubDate>Sat, 23 Dec 2023 14:41:00 +0200</pubDate><guid>https://www.brunohensel.dev/posts/partially-applied-function-example/</guid><description>Partial application Link to heading In computer science, partial application (or partial function application) refers to the process of fixing a number of arguments of a function, producing another function of smaller arity. Source
The way I see it, this is a function in which the final result is computed at different time:
// Example from the Functional Programming with Kotlin book fun &amp;lt;A, B, C&amp;gt; partial1(a: A, f: (A, B) -&amp;gt; C): (B) -&amp;gt; C = { b -&amp;gt; f(a, b) } In this case, we call a function passing in as arguments a a:A value and a function from (A, B) to C, producing another function from B to C.</description></item><item><title>The Downsides of Excessive Mocks and Stubs in Unit Testing</title><link>https://www.brunohensel.dev/posts/down-sides-of-mocks-and-stubs/</link><pubDate>Sat, 19 Aug 2023 08:09:57 +0200</pubDate><guid>https://www.brunohensel.dev/posts/down-sides-of-mocks-and-stubs/</guid><description>The Downsides of Excessive Mocks and Stubs in Unit Testing Link to heading As commonly known, unit testing is a crucial part of software development. The use of mocks and stubs has become standard practice to isolate components and ensure reliable tests (London School). However, it&amp;rsquo;s imperative to recognize the fragility and potential pitfalls associated with excessive mock and stub usage.
Clarifying Mocks and Stubs: Link to heading Before delving into the drawbacks, let&amp;rsquo;s clarify the terms &amp;ldquo;mock&amp;rdquo; and &amp;ldquo;stub.</description></item></channel></rss>